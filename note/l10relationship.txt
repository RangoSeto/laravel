// =>Eloquent Relationships 

// =One to One relationship 

=In Model (User.php)
protected $table = 'users';
protected $primarykey = 'id';

public function article(){
        // Method1 
        // return $this->hasOne('App\Models\Article');

        // Method 2
        return $this->hasOne(Article::class);
    }


=In Model (Article.php)
public function user(){
        return $this->belongsTo('App\Models\User');
        return $this->belongsTo('User::class');

    }


=In Web

use App\Models\User;

Route::get('users/{id}/article',function($id){

	$article = User::findOrFail($id)->article->title;
	$article = User::findOrFail($id)->article->description;
	$article = User::findOrFail($id)->article->rating;

	return $article;

});

Route::get('articles/{id}/user',function($id){

	// $article = Article::findOrFail($id)->user->name;
	$article = Article::findOrFail($id)->user->email;

	return $article;
});


-------------------------------------------


// =One to Many relationship 

=In Model (User.php)
public function articles(){
        return $this->hasMany(Article::class);
    }


=In Model (Article.php)
public function user(){
        // return $this->belongsTo('App\Models\User');
        return $this->belongsTo(User::class);
    }

=In Web
Route::get('articles/{id}/byuser',function($id){
	// $user = User::findOrFail($id);
	// return $user->articles;

	$user = User::findOrFail($id);

	foreach($user->articles as $article){
		echo $article->title ."<br/>";
	}
});

--------------------------------------------------

= Many to Many

=Migration

php artisan make:migration create_roles_table
php artisan make:model Role
(or)
php artisan make:migration create_roles_table --create="roles"
php artisan make:model Role
(vs)
php artisan make:model Role -m

$table->string('name');


=Obey by Laravel Nameing Conversion
php artisan make:migration create_roles_users_table --create="role_user"
// must be "role_user"
$table->unsignedBigInteger('user_id');
$table->unsignedBigInteger('role_id');

php artisan migrate:status
php artisan migrate

=In Model (user)
public function roles(){
        return $this->belongsToMany(Role::class);
    }

=In Web
Route::get('user/{id}/role',function($id){
	$user = User::findOrFail($id);
	return $user->roles;


	$user = User::findOrFail($id);
	foreach($user->roles as $role){
		echo $role->name . "<br/>";
	}

	$user = User::findOrFail($id)->roles()->orderBy('id','asc')->get(); //getနဲ့ယူမယ်ဆိုရင်တော့ အများကြီး arr နဲ့ထွက်လို့ roles() ()နဲ့သုံး
	return $user;

});


=Migration

php artisan migrate:rollback --pretend
php artisan migrate:rollback

php artisan make:migration create_users_roles_table --create="role_user" // ဒီတိုင်းဆိုလည်းokတယ် --create="role_user" ပဲဖြစ်နေတာမလို့ naming Conversionကိုobeyလုပ်တယ်လို့ပြောလို့ရတယ် ဒီမှာပေါ်တဲ့create_users_roles_table က tableရဲ့just nameingပဲဖြစ်နေတာမလို့

php artisan make:migration create_users_roles_table --create="userroles"
// must be "role_user"
$table->unsignedBigInteger('user_id');
$table->unsignedBigInteger('role_id');

php artisan migrate:status
php artisan migrate

// In user Models
public function roles(){

        // return $this->belongsToMany(Role::class); //obey by naming conversion

        // =For Custom Table name
        // BelongsToMany(primarytable,secondarytable,secondarytable_fk,primarytable_fk)
        // BelongsToMany(related,dummytable,foreignPivotKey,relativePivotKey)


        return $this->belongsToMany(Role::class,'userroles','user_id','role_id');
    }


// In user Models
// = belongsToMany with withPivot()
public function rolecreatedate(){
        // return $this->belongsToMany(Role::class)->withPivot('created_at'); //error Base table or viewtable not found

        return $this->belongsToMany(Role::class,'userroles','user_id','role_id')->withPivot('created_at'); //ဒီမှာ withPivot() နဲ့ created_at ပဲခေါ်ထားရင် webမှာလည်းအဲ့ဒါပဲသုံးလို့ရမယ်
    }

// In web

Route::get('users/{id}/rolecreatedate',function($id){

	$user = User::findOrFail($id);

	foreach($user->rolecreatedate as $role){
		echo $role->pivot->created_at . "<br/>";
	}

});


----------------------------------------------------

// = Has Many Through Relationship

=Migration 

php artisan make:model Gender -m
$table->string('name');

=Add columns
php artisan make:migration add_gender_id_to_users_table --table=users
=up by sort
$table->integer('gender_id')->after('password');
=down
$table->dropColumn('gender_id');

php artisan migrate:status
php artisan migrate


= In Model (Gender.php)
public function articles(){

        // HasManyThrough(related,through)
        
        return $this->hasManyThrough(Article::class,User::class);

        
        // = HasManyThrough(related,through,firstkey,secondkey)
        return $this->hasManyThrough(Article::class,User::class,'gender_id','user_id');
    }


= In Web
Route::get('genders/{id}/article',function($id){

	$gender = Gender::findOrFail($id);

	foreach($gender->articles as $article){
		echo $article->title . "<br/>";
	}

});

---------------------------------------------------

=>Polymmorphic relationship 

= Migration 
//Polymmorphicပေးရင် able_id နဲ့ able_type ပေးရမယ်
(article,product,faq table တွေအများကြီးအတွက် commentအတွက်ဆိုရင် comment table ၁ခုထဲပေးပြီးချိတ်ဆက်အသုံးပြုနိုင်အောင်လုပ်တာ)

php artisan make:model Photo -m
$table->string('path');
$table->integer('imageable_id')->unsigned();
$table->string('imageable_type');

php artisan migrate:status
php artisan migrate

=In Model (User.php)

public function photos(){
        // morphMany(relatedtable,name);
        return $this->morphMany(Photo::class,'imageable'); //imageableလို့ရှေ့မှာသုံးထားလို့ 
    }

=In Model (Article.php)

public function photos(){
        // morphMany(relatedtable,name);
        return $this->morphMany(Photo::class,'imageable');
    }

=In Web

Route::get('users/{id}/photo',function($id){
	
	$user = User::findOrFail($id);

	foreach($user->photos as $photo){
		echo $photo->path . "<br/>";
	}

});

Route::get('articles/{id}/photo',function($id){
	
	$article = Article::findOrFail($id);

	foreach($article->photos as $photo){
		echo $photo->path . "<br/>";
	}

});

--------------------------------------

=Reverse Thinking

in model (photo)
// imageable ကပေးကိုပေးရမှာ မပေးရင် အောက်ကလိုပြန်ပြောပေးရမှာ
    // public function imageable(){
    //     // morphTo();
    //     return $this->morphTo();
    // }

    public function photoable(){
        // morphTo('name');
        return $this->morphTo('imageable'); // Note:: if you use imageable_id imageable_type ! set here imageable
    }

= IN web

Rouute::get('photos/{id}/result',function(){

	// $photo = Photo::findOrFail($id);
	// return $photo->imageable;
	// return $photo->imageable->title;

	$photo = Photo::findOrFail($id);
	return $photo->photoable;

});


//--------------

=Migrations

php artisan make:model Comment -m
$table->string('message');
$table->integer('user_id')->unsigned();
$table->integer('commentable_id')->unsigned();
$table->string('commentable_type');


php artisan migrate:status
php artisan migrate



Route::get('articles/{id}/comment',function($id){


	$article = Article::findOrFail($id);
	
	foreach($article->comments as $comment){
		echo $comment->message . "<br/>";
	}

});

Route::get('users/{id}/comment',function($id){


	$user = User::findOrFail($id);
	
	foreach($user->comments as $comment){
		echo $comment . "<br/>";
	}

});

in model (User)
 public function comments(){
        // morphMany(relatedtable,name);
        return $this->morphMany(Article::class,'commentable');
    }

In model (Comment)
public function commentable(){
        // morphTo('name');
        return $this->morphTo('commentable'); // Note:: if you use imageable_id imageable_type ! set here imageable
    }

In model (Article)
public function comments(){
        // morphMany(relatedtable,name);
        return $this->morphMany(Comment::class,'commentable');
    }


    //--------------------------------
// => Polymorphic Relationship Many to Many

// = Migration

php artisan make:model Item -m

$table->string('name');

php artisan make:model Tag -m

$table->string('name');

php artisan make:model Taggable -m

$table->integer('tag_id');
$table->integer('taggable_id');
$table->string('taggable_type');

php artisan migrate:status
php artisan migrate


=In model (Article.php)

public function tags(){
        // morphToMany(relatedtable,name);
        return $this->morphToMany(Tag::class,'taggable');
    }


=In model (Item.php)

public function tags(){
        // morphToMany(relatedtable,name);
        return $this->morphToMany(Tag::class,'taggable');
    }


=In model (Tag.php)

public function articles(){
        // morphedByMany(relatedtable,name);
        return $this->morphedByMany(Article::class,'taggable');
    }

    public function items(){
        // morphedByMany(relatedtable,name);
        return $this->morphedByMany(Item::class,'taggable');
    }


=In Web

Route::get('items/{id}/tag',function($id){

	$item = Item::findOrFail($id);

	foreach($item->tags as $tag){
		echo $tag->name . "<br/>";
	}

});

Route::get('tags/{id}/article',function($id){

	$tag = tag::findOrFail($id);

	foreach($tag->articles as $article){
		echo $article->title . "<br/>";
	}

});

Route::get('tags/{id}/item',function($id){

	$tag = tag::findOrFail($id);

	foreach($tag->items as $item){
		echo $item->name . "<br/>";
	}

});





